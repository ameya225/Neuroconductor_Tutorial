"CHFDUR",
"NSYM",
"CHFETIOL")
myVars <- c("AGE",
"RACE",
"SEX",
"BMI",
"CHFDUR",
"NSYM",
"CHFETIOL",
"PREVMI",
"ANGINA",
"DIABETES",
"HYPERTEN")
## Vector of categorical variables that need transformation
catVars <- c("RACE",
"SEX",
"CHFETIOL")
## Create a TableOne object
table1 <- CreateTableOne(strata =  'TRTMT', vars = myVars, data = dig, factorVars = catVars)
library(tableone)
table1 <- CreateTableOne(strata =  'TRTMT', vars = myVars, data = dig, factorVars = catVars)
table1
surv_object_dig <- Surv(time = dig$DEATHDAY, event = dig$DEATH)
library(survival)
surv_object_dig <- Surv(time = dig$DEATHDAY, event = dig$DEATH)
fit_dig_trtmt <-  survfit(surv_object_dig ~ TRTMT, data = dig)
ggsurvplot(fit_dig_trtmt,
data = dig,
pval = TRUE,
conf.int = TRUE)
library(survminer)
ggsurvplot(fit_dig_trtmt,
data = dig,
pval = TRUE,
conf.int = TRUE)
survdiff(surv_object_dig ~ TRTMT, data = dig)
fit.dig <- coxph(surv_object_dig ~ TRTMT +
AGE +
RACE +
SEX +
BMI +
CHFDUR +
NSYM +
CHFETIOL +
PREVMI +
ANGINA +
DIABETES +
HYPERTEN, data = dig)
ggforest(fit.dig, data = dig)
zph.test.dig<- cox.zph(fit.dig)
zph.test.dig
ggcoxzph(fit.dig)
ggcoxzph(zph.test.dig)
head(dig$REASON)
is.na(dig$REASON) <- 0
head(dig$REASON)
dig$REASON[is.na(dig$REASON)] <- 0
head(dig$REASON)
## Calculate the grouped cumulative incidence functions (CIF)
bmt_cum_incidence <- cuminc(ftime   = BMT$DEATHDAY,
fstatus = BMT$REASON,
group   = BMT$TRTMT,
cencode = 0)
## Calculate the grouped cumulative incidence functions (CIF)
bmt_cum_incidence <- cuminc(ftime   = BMT$DEATHDAY,
fstatus = BMT$REASON,
group   = BMT$TRTMT,
cencode = 0)
library(cmprsk)
bmt_cum_incidence <- cuminc(ftime   = BMT$DEATHDAY,
fstatus = BMT$REASON,
group   = BMT$TRTMT,
cencode = 0)
BMT$DEATHDAY
bmt_cum_incidence <- cuminc(ftime   = dig$DEATHDAY,
fstatus = dig$REASON,
group   = dig$TRTMT,
cencode = 0)
plot(bmt_cum_incidence)
dig$REASON[is.na(dig$REASON)] <- 0
dig$TRTMT  <- factor(dig$TRTMT,
levels = c("0", "1"),
labels = c("Placebo", "Treatment"))
dig$REASON  <- factor(dig$REASON,
levels = c("0", "1", "2", "3", "4", "5"),
labels = c("Censored",
"Worsening Heart Failure",
"Other Cardiac",
"Other Vascular",
"Unknown",
"Other Cause"))
## Calculate the grouped cumulative incidence functions (CIF)
dig_cum_incidence <- cuminc(ftime   = dig$DEATHDAY,
fstatus = dig$REASON,
group   = dig$TRTMT,
cencode = 0)
plot(dig_cum_incidence)
library(dplyr)
library(tableone)
library(survival)
library(survminer)
library(cmprsk)
dig <- read.csv("~/Desktop/digitalis/DIG_csv/DIG_csv/dig.csv")
dig$RACE  <- factor(dig$RACE,
levels = c("1", "2"),
labels = c("White", "Nonwhite"))
dig$SEX  <- factor(dig$SEX,
levels = c("1", "2"),
labels = c("Male", "Female"))
dig$CHFETIOL  <- factor(dig$CHFETIOL,
levels = c("1", "2", "3", "4", "5", "6"),
labels = c("Ischemic",
"Hypertensive",
"Valvular",
"Idiopathic",
"Alcohol Related",
"Other"))
myVars <- c("AGE",
"RACE",
"SEX",
"BMI",
"CHFDUR",
"NSYM",
"CHFETIOL",
"PREVMI",
"ANGINA",
"DIABETES",
"HYPERTEN")
## Vector of categorical variables that need transformation
catVars <- c("RACE",
"SEX",
"CHFETIOL")
## Create a TableOne object
table1 <- CreateTableOne(strata =  'TRTMT', vars = myVars, data = dig, factorVars = catVars)
table1
surv_object_dig <- Surv(time = dig$DEATHDAY, event = dig$DEATH)
fit_dig_trtmt <-  survfit(surv_object_dig ~ TRTMT, data = dig)
ggsurvplot(fit_dig_trtmt,
data = dig,
pval = TRUE,
conf.int = TRUE)
survdiff(surv_object_dig ~ TRTMT, data = dig)
fit.dig <- coxph(surv_object_dig ~ TRTMT +
AGE +
RACE +
SEX +
BMI +
CHFDUR +
NSYM +
CHFETIOL +
PREVMI +
ANGINA +
DIABETES +
HYPERTEN, data = dig)
ggforest(fit.dig, data = dig)
zph.test.dig<- cox.zph(fit.dig)
dig$REASON[is.na(dig$REASON)] <- 0
dig$TRTMT  <- factor(dig$TRTMT,
levels = c("0", "1"),
labels = c("Placebo", "Treatment"))
dig$REASON  <- factor(dig$REASON,
levels = c("0", "1", "2", "2", "2", "2"),
labels = c("Censored",
"Worsening Heart Failure",
"Other"))
dig$REASON  <- factor(dig$REASON,
levels = c("0", "1", "2", "2", "2", "2"),
labels = c("Censored",
"Worsening Heart Failure",
"Other",
"Other",
"Other"
"Other"))
dig$REASON  <- factor(dig$REASON,
levels = c("0", "1", "2", "2", "2", "2"),
labels = c("Censored",
"Worsening Heart Failure",
"Other",
"Other",
"Other",
"Other"))
dig$REASON  <- factor(dig$REASON,
levels = c("0", "1", "2", "3", "4", "5"),
labels = c("Censored",
"Worsening Heart Failure",
"Other Cardiac",
"Other Vascular",
"Unknown",
"Other Cause"))
levels(dig$REASON)[levels(dig$REASON) %in% c("Other Cardiac",
"Other Vascular",
"Unknown",
"Other Cause")] <- "Other"
dig_cum_incidence <- cuminc(ftime   = dig$DEATHDAY,
fstatus = dig$REASON,
group   = dig$TRTMT,
cencode = "Censored")
plot(dig_cum_incidence)
?crr
dis.matrix <- dis %>%
select(TRTMT, AGE, RACE, SEX, BMI, CHFDUR, NSYM, CHFETIOL, PREVMI, ANGINA, DIABETE, HYPERTEN)
dig.matrix <- dig %>%
select(TRTMT, AGE, RACE, SEX, BMI, CHFDUR, NSYM, CHFETIOL, PREVMI, ANGINA, DIABETE, HYPERTEN)
dig.matrix <- dig %>%
select(TRTMT, AGE, RACE, SEX, BMI, CHFDUR, NSYM, CHFETIOL, PREVMI, ANGINA, DIABETES, HYPERTEN)
head(dig.matrix)
dig.matrix
dig.matrix <- as.matrix(dig.matrix)
dig.matrix
dig.matrix <- dig %>%
select(TRTMT, AGE, RACE, SEX, BMI, CHFDUR, NSYM, CHFETIOL, PREVMI, ANGINA, DIABETES, HYPERTEN)
dig.matrix <- as.matrix(dig.matrix)
bmt_crr_mortality <- crr(ftime = dig$DEATHDAY, # vector of failure/censoring times
fstatus  = dig$REASON, # vector with a unique code for each failure type and censoring
cov1     = dig.matrix, #  matrix (nobs x ncovs) of fixed covariates
failcode = "Worsening Heart Failure", # code of fstatus that denotes the failure type of interest
cencode  = "Censored" # code of fstatus that denotes censored observations
)
summary(bmt_crr_mortality)
sum(is.na(dig$REASON))
sum(is.na(dig$DEATHDAY))
dig.matrix
dig.matrix$BMI <- as.numeric(dig.matrix$BMI)
dig.matrix <- dig %>%
select(TRTMT, AGE, RACE, SEX, BMI, CHFDUR, NSYM, CHFETIOL, PREVMI, ANGINA, DIABETES, HYPERTEN)
cencode  = "Censored" # code of fstatus that denotes censored observations)
bmt_crr_mortality <- crr(ftime = dig$DEATHDAY, # vector of failure/censoring times
fstatus  = dig$REASON, # vector with a unique code for each failure type and censoring
cov1     = dig.matrix, #  matrix (nobs x ncovs) of fixed covariates
failcode = "Worsening Heart Failure", # code of fstatus that denotes the failure type of interest
cencode  = "Censored" # code of fstatus that denotes censored observations
)
dig.matrix <- dig %>%
select(BMI)
dig.matrix <- as.matrix(dig.matrix)
dig.matrix
bmt_crr_mortality <- crr(ftime = dig$DEATHDAY, # vector of failure/censoring times
fstatus  = dig$REASON, # vector with a unique code for each failure type and censoring
cov1     = dig.matrix, #  matrix (nobs x ncovs) of fixed covariates
failcode = "Worsening Heart Failure", # code of fstatus that denotes the failure type of interest
cencode  = "Censored" # code of fstatus that denotes censored observations
)
summary(bmt_crr_mortality)
dig.matrix <- dig %>%
select(TRTMT, AGE, RACE, SEX, BMI, CHFDUR, NSYM, CHFETIOL, PREVMI, ANGINA, DIABETES, HYPERTEN)
dig.matrix <- data.matrix(dig.matrix)
View(dig.matrix)
bmt_crr_mortality <- crr(ftime = dig$DEATHDAY, # vector of failure/censoring times
fstatus  = dig$REASON, # vector with a unique code for each failure type and censoring
cov1     = dig.matrix, #  matrix (nobs x ncovs) of fixed covariates
failcode = "Worsening Heart Failure", # code of fstatus that denotes the failure type of interest
cencode  = "Censored" # code of fstatus that denotes censored observations
)
summary(bmt_crr_mortality )
source("https://neuroconductor.org/neurocLite.R")
neuro_install("PACKAGE")
neuro_install('oro.nifti')
?neuro_install
neuro_install('oro.nifti')
neuro_install('WhiteStripe')
neuro_install('RAVEL')
neuro_install('oasisr')
neuro_install('SuBLIME')
neuro_install('oro.nifti')
neuro_install('fslr')
neuro_install('WhiteStripe')
neuro_install('RAVEL')
neuro_install('Oasisr')
neuro_install('sublime')
neuro_install('oro.nifti')
neuro_install('fslr')
neuro_install('WhiteStripe')
neuro_install('Oasisr')
neuro_install('sublime')
library(oro.nifti)
setwd('~/Desktop/Neuroconductor_Tutorial')
MPRAGE_base <- readNIfTI('SUBJ0001-01-MPRAGE.nii.gz', reorient=FALSE)
dim(MPRAGE_base)
MPRAGE_base
slotNames(MPRAGE_base)
##axial slice##
image(MPRAGE_base[,,128])
##coronal slice##
image(MPRAGE_base[,128,], col = rainbow(12))
##sagittal slice##
image(MPRAGE_base[85,,], col = topo.colors(12))
MPRAGE_base <- readNIfTI('SUBJ0001-01-MPRAGE.nii.gz')
dim(MPRAGE_base)
MPRAGE_base
slotNames(MPRAGE_base)
##axial slice##
image(MPRAGE_base[,,128])
##coronal slice##
image(MPRAGE_base[,128,], col = rainbow(12))
##sagittal slice##
image(MPRAGE_base[85,,], col = topo.colors(12))
orthographic(MPRAGE_base)
orthographic(MPRAGE_base, xyz = c(90, 100, 15))
ggplot(aes(x = c(MPRAGE_base))) +
geom_hist()
ggplot(aes(x = data.frame(c(MPRAGE_base)))) +
geom_hist()
ggplot.MPRAGE.object <- data.frame(intensities = c(MPRAGE_base))
ggplot(ggplot.MPRAGE.object, aes(x = intensities)) +
geom_hist()
ggplot(ggplot.MPRAGE.object, aes(x = intensities)) +
geom_histogram()
ggplot.MPRAGE.object.no.zeros <- ggplot.MPRAGE.object  %>%
filter(intensities > 0)
dim(ggplot.MPRAGE.object)
dim(gggplot.MPRAGE.object.no.zeros)
dim(ggplot.MPRAGE.object.no.zeros)
ggplot(ggplot.MPRAGE.object.no.zeros, aes(x = intensities)) +
geom_histogram()
?double_ortho
library(fslr)
?double_ortho
getwd()
MPRAGE_follow <- readNIfTI('SUBJ0001-02-MPRAGE.nii.gz')
double_ortho(MPRAGE_base, MPRAGE_follow)
MPRAGE_diff <- MPRAGE_base - MPRAGE_follow
MPRAGE_diff
orthographic(MPRAGE_diff )
options(fsl.path= "/usr/local/fsl")
MPRAGE_base_bias_corrected <- fsl_biascorrect(MPRAGE_base)
bias_diff <- MPRAGE_base_bias_corrected  - MPRAGE_base
orthographic(bias_diff)
MPRAGE_base <- readNIfTI('SUBJ0001-01-MPRAGE.nii.gz', reorient=FALSE)
dim(MPRAGE_base)
MPRAGE_base
slotNames(MPRAGE_base)
##axial slice##
image(MPRAGE_base[,,128])
##coronal slice##
image(MPRAGE_base[,128,], col = rainbow(12))
##sagittal slice##
image(MPRAGE_base[85,,], col = topo.colors(12))
orthographic(MPRAGE_base)
orthographic(MPRAGE_base, xyz = c(90, 100, 15))
ggplot.MPRAGE.object <- data.frame(intensities = c(MPRAGE_base))
ggplot(ggplot.MPRAGE.object, aes(x = intensities)) +
geom_histogram()
ggplot.MPRAGE.object.no.zeros <- ggplot.MPRAGE.object  %>%
filter(intensities > 0)
dim(ggplot.MPRAGE.object)
dim(ggplot.MPRAGE.object.no.zeros)
ggplot(ggplot.MPRAGE.object.no.zeros, aes(x = intensities)) +
geom_histogram()
MPRAGE_follow <- readNIfTI('SUBJ0001-02-MPRAGE.nii.gz')
double_ortho(MPRAGE_base, MPRAGE_follow)
MPRAGE_follow <- readNIfTI('SUBJ0001-02-MPRAGE.nii.gz', reorient = FALSE)
double_ortho(MPRAGE_base, MPRAGE_follow)
MPRAGE_diff <- MPRAGE_base - MPRAGE_follow
MPRAGE_diff
orthographic(MPRAGE_diff )
options(fsl.path= "/usr/local/fsl")
MPRAGE_base_bias_corrected <- fsl_biascorrect(MPRAGE_base)
bias_diff <- MPRAGE_base_bias_corrected  - MPRAGE_base
orthographic(bias_diff)
MPRAGE_base_bias_corrected_follow <- fsl_biascorrect(MPRAGE_follow)
writeNIfTI(MPRAGE_base_bias_corrected, filename =
'SUBJ0001-02-MPRAGE_bias_corr', verbose = TRUE, gzipped = TRUE)
MPRAGE_base_bias_corrected_stripped <- fslbet(MPRAGE_base_bias_corrected)
double_ortho(MPRAGE_base, MPRAGE_base_bias_corrected_stripped)
bet_mask <- niftiarr(MPRAGE_base_bias_corrected_stripped, 1)
is_in_mask = MPRAGE_base_bias_corrected_stripped>0
bet_mask[!is_in_mask]<-0
orthographic(MPRAGE_base_bias_corrected ,bet_mask)
orthographic(bet_mask)
writeNIfTI(MPRAGE_base_bias_corrected, filename =  'SUBJ0001-01-MPRAGE_bias_corr', verbose = TRUE, gzipped = TRUE)
## read in the bias corrected baseline image
MPRAGE_base_bias_corrected <- readNIfTI('SUBJ0001-01-MPRAGE_bias_corr.nii.gz', reorient=FALSE)
##take a difference between the bias corrected image and the original image
bias_diff <- MPRAGE_base_bias_corrected  - MPRAGE_base
##visualize the difference
orthographic(bias_diff)
?niftiarr
ggplot.MPRAGE.object$bet_mask <- bet_mask
ggplot.MPRAGE.object$bet_mask <- c(bet_mask)
ggplot.MPRAGE.object.masked <- ggplot.MPRAGE.object %>%
filet(bet_mask == 1)
ggplot.MPRAGE.object.masked <- ggplot.MPRAGE.object %>%
filter(bet_mask == 1)
ggplot(ggplot.MPRAGE.object.masked, aes(x = intensities)) +
geom_histogram()
ggplot(ggplot.MPRAGE.object.masked, aes(x = intensities)) +
geom_density()
double_ortho(MPRAGE_base, MPRAGE_base_bias_corrected_stripped)
MPRAGE_follow_bias_corrected <- readNIfTI('SUBJ0001-02-MPRAGE_bias_corr.nii.gz', reorient=FALSE)
MPRAGE_follow_reg_base <- flirt(MPRAGE_follow_bias_corrected,
MPRAGE_base_bias_corrected,
dof = 6,
retimg = TRUE,
reorient = FALSE)
MPRAGE_reg_diff <- MPRAGE_base - MPRAGE_follow_reg_base
double_ortho(MPRAGE_diff, MPRAGE_reg_diff)
MPRAGE_reg_diff <- MPRAGE_base_bias_corrected - MPRAGE_follow_reg_base
double_ortho(MPRAGE_diff, MPRAGE_reg_diff)
MPRAGE_reg_diff <- MPRAGE_base_bias_corrected - MPRAGE_follow_reg_base
double_ortho(MPRAGE_diff, MPRAGE_reg_diff)
dim(MPRAGE_reg_diff)
summary(MPRAGE_reg_diff)
head(MPRAGE_reg_diff)
head(MPRAGE_base_bias_corrected)
orthographic(MPRAGE_base_bias_corrected)
orthographic(MPRAGE_reg_diff)
orthographic(MPRAGE_reg_diff)
double_ortho(MPRAGE_diff, MPRAGE_reg_diff)
orthographic(MPRAGE_diff)
MPRAGE_follow_bias_corrected <- fsl_biascorrect(MPRAGE_follow)
writeNIfTI(MPRAGE_follow_bias_corrected, filename =
'SUBJ0001-02-MPRAGE_bias_corr', verbose = TRUE, gzipped = TRUE)
MPRAGE_follow_bias_corrected <- readNIfTI('SUBJ0001-02-MPRAGE_bias_corr.nii.gz', reorient=FALSE)
MPRAGE_follow_reg_base <- flirt(MPRAGE_follow_bias_corrected,
MPRAGE_base_bias_corrected,
dof = 6,
retimg = TRUE,
reorient = FALSE)
MPRAGE_reg_diff <- MPRAGE_base_bias_corrected - MPRAGE_follow_reg_base
double_ortho(MPRAGE_diff, MPRAGE_reg_diff)
ws = whitestripe(img = MPRAGE_base_bias_corrected_stripped,
type = "T1",
stripped = TRUE)
library(WhiteStripe)
ws = whitestripe(img = MPRAGE_base_bias_corrected_stripped,
type = "T1",
stripped = TRUE)
orthographic(ws)
norm = whitestripe_norm(img =  MPRAGE_base_bias_corrected_stripped,
indices = ws$whitestripe.ind)
ws = whitestripe(img = MPRAGE_base_bias_corrected_stripped,
type = "T1",
stripped = TRUE)
norm = whitestripe_norm(img =  MPRAGE_base_bias_corrected_stripped,
indices = ws$whitestripe.ind)
dim(norm)
orthographic(norm)
orthographic(norm)
ggplot.MPRAGE.object$normalized <- c(norm)
ggplot.MPRAGE.object.norm.masked <- ggplot.MPRAGE.object %>%
filter(bet_mask == 1)
ggplot(ggplot.MPRAGE.object.norm.masked, aes(x = intensities)) +
geom_histogram()
ggplot(ggplot.MPRAGE.object.norm.masked, aes(x = intensities)) +
geom_density()
ggplot(ggplot.MPRAGE.object.norm.masked, aes(x = norm)) +
geom_density()
ggplot(ggplot.MPRAGE.object.norm.masked, aes(x = normalized)) +
geom_density()
ggplot(ggplot.MPRAGE.object.norm.masked, aes(x = intensities)) +
geom_histogram()
ggplot(ggplot.MPRAGE.object.norm.masked, aes(x = normalized)) +
geom_histogram()
FLAIR <- readNIfTI('training01_01_flair.nii.gz', reorient=FALSE)
orthographic(FLAIR)
FLAIR <- readNIfTI('training01_01_t2.nii.gz', reorient=FALSE)
T2 <- readNIfTI('training01_01_t2.nii.gz', reorient=FALSE)
FLAIR <- readNIfTI('training01_01_flair.nii.gz', reorient=FALSE)
orthographic(T2)
PD <- readNIfTI('training01_01_pd.nii.gz', reorient=FALSE)
orthographic(PD)
T1 <- readNIfTI('training01_01_t1.nii.gz', reorient=FALSE)
T1 <- readNIfTI('training01_01_mprage_n4.nii.gz', reorient=FALSE)
orthographic(T1)
library(oasisr)
library(Oasisr)
library(Oasis)
library(Oasisr)
neuro_install('Oasisr')
neuro_install('OasisR')
library(OasisR)
?oasis_predict
neuro_install('oasis')
library(oasis)
?oasis_predict
oasis_map <- oasis_predict(flair = FLAIR ,
t1 = T1,
t2 = T2,
pd = PD)
orthographic(oasis_map)
names(oasis_map)
names(oasis_map$oasis_map)
orthographic(oasis_map$oasis_map)
oasis_map_binary[oasis_map >= .5] <- 1
oasis_map_binary <- oasis_map
oasis_map_binary[oasis_map_binary >= .5] <- 1
oasis_map_binary <- oasis_map$oasis_map
oasis_map_binary[oasis_map_binary >= .5] <- 1
oasis_map_binary[oasis_map_binary < 1] <- NA
orthographic(T1, oasis_map_binary, col.y = "orange")
writeNIfTI(oasis_map$oasis_map, filename = 'oasis', verbose = TRUE, gzipped = TRUE)
oasis_map <- readNIfTI('oasis.nii.gz', reorient=FALSE)
orthographic(oasis_map)
oasis_map_binary <- oasis_map
oasis_map_binary[oasis_map_binary >= .5] <- 1
oasis_map_binary[oasis_map_binary < 1] <- NA
orthographic(T1, oasis_map_binary, col.y = "orange")
summary(MPRAGE_base)
fslbet
FLAIR <- readNIfTI('training01_01_flair.nii.gz', reorient=FALSE)
orthographic(FLAIR)
dim(FLAIR)
orthographic(FLAIR, xyz = c(100, 100, 60))
orthographic(FLAIR, xyz = c(100, 100, 80))
orthographic(T1, oasis_map_binary, col.y = "orange")
orthographic(T1, oasis_map_binary, col.y = "orange", xyz = c(100, 100, 80))
orthographic(T1, xyz = c(100, 100, 80))
orthographic(FLAR, xyz = c(100, 100, 80))
orthographic(FLAIR, xyz = c(100, 100, 80))
source("https://neuroconductor.org/neurocLite.R")
source("https://neuroconductor.org/neurocLite.R")
